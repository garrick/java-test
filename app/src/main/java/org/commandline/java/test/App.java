/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.commandline.java.test;

import org.commandline.java.test.console.ConsoleWrapper;
import org.commandline.java.test.console.DefaultConsoleWrapper;
import org.commandline.java.test.console.ProductFromItem;

import java.time.LocalDateTime;
import java.util.HashMap;

import static org.commandline.java.test.console.ProductFromItem.PRODUCT_UNKNOWN;

public class App {
    public static final String SELECT_PROMPT = "Select: [type number to add,'-number' to remove,'b' to show basket, 'p' to pay, 'x' to exit]";
    private final ConsoleWrapper consoleWrapper;
    private final HenrysGrocery henrysGrocery;
    private Basket basket;
    private String inventoryMessage = "";
    private ProductFromItem productFromItem;

    public App(ConsoleWrapper consoleWrapper, HenrysGrocery henrysGrocery) {
        this.consoleWrapper = consoleWrapper;
        this.henrysGrocery = henrysGrocery;
    }

    public String getGreeting() {
        StringBuilder sb = new StringBuilder();
        sb.append("Welcome to Henry's Grocery!\n");
        sb.append("===========================\n");
        sb.append("We sell all four items!\n");
        sb.append(getInventoryMessage());
        return sb.toString();
    }


    public static void main(String[] args) {
        HenrysGrocery henrysGrocery = new HenrysGrocery();
        App app = new App(new DefaultConsoleWrapper(), henrysGrocery);
        app.buildInventoryData();
        app.workflow();
    }

    public void workflow() {
        String dateString = consoleWrapper.readLine("Enter today's date in YYYY-MM-DD format:");
        String[] dateTimeBits = LocalDateTime.now().toString().split("T");
        LocalDateTime localDateTime = LocalDateTime.parse(dateString + "T" + dateTimeBits[1]);
        consoleWrapper.printf(getGreeting());
        String lastItem = "";
        basket = new Basket(localDateTime);
        while (!"p".equals(lastItem) && !"x".equals(lastItem)) {
            lastItem = consoleWrapper.readLine(SELECT_PROMPT);
            basket = processSelection(lastItem, basket);
        }
    }

    Basket processSelection(String value, Basket basket) {
        //I don't like this.  I'd prefer to put in a chain of command, or
        //perhaps a better pattern.  But, I've put in a good chunk of time on this now.
        //I'd most likely ask for some pair review on improving this, but since it's
        //supposed to be my own work, I'll leve it as is. --GW
        if ("x".equals(value)) {
            consoleWrapper.printf("Abandoned basket!");
            return basket;
        }
        if ("b".equals(value)) {
            consoleWrapper.printf(basket.describeForShopper());
            return basket;
        }
        String product = productFromItem.convertSelectionToProduct(value);
        if(!PRODUCT_UNKNOWN.equals(product)) {
            return (value.startsWith("-") ? basket.remove(henrysGrocery.getStockItemByName(product)) :
                    basket.add(henrysGrocery.getStockItemByName(product)));
        }
        if("p".equals(value)) {
            return checkout(basket);
        }
       return basket;
    }

    private Basket checkout(Basket basket) {
        Basket resultBasket = basket.applyDiscount(new TenPercentOffApples(henrysGrocery));
        resultBasket = resultBasket.applyDiscount(new TwoSoupGetsHalfPriceBreadDiscount(henrysGrocery));
        consoleWrapper.printf(resultBasket.describeForShopper());
        consoleWrapper.printf("Your total: "+ resultBasket.totalCost());
        return resultBasket;
    }

    public void buildInventoryData() {
        StringBuilder sb = new StringBuilder();
        String inventoryCSV = henrysGrocery.getInventoryAsCSV();
        HashMap<String,String> itemIdToProductHashMap = new HashMap<>();
        String[] lines = inventoryCSV.split("\n");
        sb.append(String.format("\t Item# \t| %-7s \t| %-5s \t| %-5s \n", (Object[]) lines[0].split(",")));
        for (int i = 1; i < lines.length; i++) {
            Object[] columns = (Object[]) lines[i].split(",");
            sb.append(String.format(" \t" + i + " \t| %-7s \t| %-5s \t| %-5s \n", columns));
            itemIdToProductHashMap.put("" + i, "" + columns[0]);
        }
        productFromItem = new ProductFromItem(itemIdToProductHashMap);
        inventoryMessage = sb.toString();
    }

    public String getInventoryMessage() {
        return inventoryMessage;
    }

    public String basketDescription(Basket basket) {
        return basket.describeForShopper();
    }
}
