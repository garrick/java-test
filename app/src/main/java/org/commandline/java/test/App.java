/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.commandline.java.test;

import org.commandline.java.test.console.*;

import java.time.LocalDateTime;

import static org.commandline.java.test.console.ProductFromItem.PRODUCT_UNKNOWN;

public class App {
    public static final String SELECT_PROMPT = "Select: [type number to add,'-number' to remove,'b' to show basket, 'p' to pay, 'x' to exit]";
    private final ConsoleWrapper consoleWrapper;
    final HenrysGrocery henrysGrocery;
    private final BasketActionResolver basketActionResolver;
    private Basket basket;
    private String inventoryMessage = "";

    public App(ConsoleWrapper consoleWrapper, HenrysGrocery henrysGrocery) {
        this.consoleWrapper = consoleWrapper;
        this.henrysGrocery = henrysGrocery;
        this.basketActionResolver = new BasketActionResolver(consoleWrapper, henrysGrocery);
    }

    public String getGreeting() {
        StringBuilder sb = new StringBuilder();
        sb.append("Welcome to Henry's Grocery!\n");
        sb.append("===========================\n");
        sb.append("We sell all four items!\n");
        sb.append(getInventoryMessage());
        return sb.toString();
    }


    public static void main(String[] args) {
        HenrysGrocery henrysGrocery = new HenrysGrocery();
        App app = new App(new DefaultConsoleWrapper(), henrysGrocery);
        app.workflow();
    }

    public void workflow() {
        String dateString = consoleWrapper.readLine("Enter today's date in YYYY-MM-DD format:");
        String[] dateTimeBits = LocalDateTime.now().toString().split("T");
        LocalDateTime localDateTime = LocalDateTime.parse(dateString + "T" + dateTimeBits[1]);
        consoleWrapper.printf(getGreeting());
        String lastItem = "";
        basket = new Basket(localDateTime);
        while (!"p".equals(lastItem) && !"x".equals(lastItem)) {
            lastItem = consoleWrapper.readLine(SELECT_PROMPT);
            basket = processSelection(lastItem, basket);
        }
    }

    Basket processSelection(String value, Basket basket) {
        //I don't like this.  I'd prefer to put in a chain of command, or
        //perhaps a better pattern.  But, I've put in a good chunk of time on this now.
        //I'd most likely ask for some pair review on improving this, but since it's
        //supposed to be my own work, I'll leve it as is. --GW
        if ("x".equals(value) || "b".equals(value) || "p".equals(value)) {
           BasketAction basketAction = basketActionResolver.resolveFor(value);
           return basketAction.processBasket(value, basket);
        }
        String product = henrysGrocery.productFromItemConvert(value);
        if(!PRODUCT_UNKNOWN.equals(product)) {
            return (value.startsWith("-") ? basket.remove(henrysGrocery.getStockItemByName(product)) :
                    basket.add(henrysGrocery.getStockItemByName(product)));
        }
       return basket;
    }

    public String getInventoryMessage() {
        return henrysGrocery.getInventoryMessage();
    }

    public String basketDescription(Basket basket) {
        return basket.describeForShopper();
    }
}
